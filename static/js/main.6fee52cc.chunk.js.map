{"version":3,"sources":["assets/bells.mp3","components/ControlButtons.js","components/Stopwatch.js","components/InputParser.js","components/FormHandler.js","components/ChangeNotifier.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ControlButons","props","status","startTimer","pauseTimer","resetTimer","IconButton","aria-label","onClick","style","fontSize","display","justifyContent","minWidth","getButtons","controlFunctions","timeFormatter","timeMilis","seconds","Math","floor","slice","minutes","hours","Stopwatch","useState","timerOn","setTimerOn","timerTime","setTimerTime","timerFinished","setTimerFinished","currentExercise","setCurrentExercise","events","setEvents","lastStart","setLastStart","timer","setTimer","clearInterval","startEvents","localEvents","workout","exercises","length","shift","useEffect","totalSeconds","exerciseMilis","exerciseSeconds","exerciseLeft","duration","nextExercise","notifyChange","getNextExercise","changeExercise","className","paddingTop","Typography","variant","paddingBottom","margin","name","alignItems","position","CircularProgress","value","parseInt","size","thickness","getTimerState","startTime","Date","now","setInterval","marginTop","isLetter","char","match","getNumReps","input","multIndex","repetitions","currentIndex","loop","unshift","test","join","trim","getBlock","m","indexOpen","indexOf","numOpen","repeatBlock","block","numTimes","repeatedBlock","i","inputToExerciseDict","replaced","c","replace","prev","post","replaceXs","makeTextReplacements","console","log","splitted","first","times","last","repeated","computeRepetition","split","forEach","ex","exercise","sIndex","mIndex","toString","mins","secs","convertToSeconds","exDuration","exName","push","FormHandler","textBox","setTextBox","showEditing","setShowEditing","setWorkout","handleSubmit","useCallback","event","preventDefault","onSubmit","TextField","width","type","multiline","onChange","e","target","Audio","audio","play","App","Boolean","window","location","hostname","lightTheme","createMuiTheme","typography","fontFamily","h1","fontWeight","h2","h3","subtitle1","palette","primary","main","secondary","accent","background","default","w","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6fee52cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bells.b62cc0d9.mp3\";","import React from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\n\r\nfunction getButtons(status, startTimer, pauseTimer, resetTimer) {\r\n  switch (status) {\r\n    case \"Playing\":\r\n      return (\r\n        <IconButton aria-label=\"pause\" onClick={pauseTimer}>\r\n          <PauseIcon style={{ fontSize: 32 }} />\r\n        </IconButton>\r\n      );\r\n    case \"Paused\":\r\n      return (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <IconButton aria-label=\"play\" onClick={startTimer}>\r\n            <PlayArrowIcon style={{ fontSize: 32 }} />\r\n          </IconButton>\r\n\r\n          <div style={{ minWidth: \"10px\" }} />\r\n\r\n          <IconButton aria-label=\"reset\" onClick={resetTimer}>\r\n            <ReplayIcon style={{ fontSize: 32 }} />\r\n          </IconButton>\r\n        </div>\r\n      );\r\n    // case \"Not started\"\r\n    default:\r\n      return (\r\n        <IconButton aria-label=\"play\" onClick={startTimer}>\r\n          <PlayArrowIcon style={{ fontSize: 32 }} />\r\n        </IconButton>\r\n      );\r\n  }\r\n}\r\n\r\nfunction ControlButons(props) {\r\n  const timerState = props.status;\r\n  const startTimer = props.controlFunctions[0];\r\n  const pauseTimer = props.controlFunctions[1];\r\n  const resetTimer = props.controlFunctions[2];\r\n\r\n  return getButtons(timerState, startTimer, pauseTimer, resetTimer);\r\n}\r\n\r\nexport default ControlButons;\r\n","import \"../App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\n\r\nimport ControlButons from \"./ControlButtons\";\r\n\r\n/**\r\n * Formats the given time to a string (HH :) MM : SS\r\n * @param {number} timeMilis Time to be formatted in milliseconds\r\n */\r\nfunction timeFormatter(timeMilis) {\r\n  //let deciseconds = (\"0\" + (Math.floor(timeMilis / 100) % 10)).slice(-1);\r\n  let seconds = (\"0\" + (Math.floor(timeMilis / 1000) % 60)).slice(-2);\r\n  let minutes = (\"0\" + (Math.floor(timeMilis / 60000) % 60)).slice(-2);\r\n  let hours = (\"0\" + Math.floor(timeMilis / 3600000)).slice(-2);\r\n\r\n  let output = \"\";\r\n  if (hours === \"00\") {\r\n    output = minutes + \" : \" + seconds;\r\n  } else {\r\n    output = hours + \" : \" + minutes + \" : \" + seconds;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction getTimerState(timerOn, timerTime) {\r\n  //  DIFFERENT STATES:\r\n  if (timerOn) {\r\n    return \"Playing\";\r\n  }\r\n  if (!timerOn && timerTime === 0) {\r\n    return \"Not Started\";\r\n  }\r\n  if (!timerOn && timerTime > 0) {\r\n    return \"Paused\";\r\n  }\r\n}\r\n\r\nfunction getButtons(timerOn, timerTime, controlFunctions) {\r\n  const status = getTimerState(timerOn, timerTime);\r\n  return <ControlButons status={status} controlFunctions={controlFunctions} />;\r\n}\r\n\r\nfunction Stopwatch(props) {\r\n  const [timerOn, setTimerOn] = useState(false);\r\n  const [timerTime, setTimerTime] = useState(0);\r\n  const [timerFinished, setTimerFinished] = useState(false);\r\n  const [currentExercise, setCurrentExercise] = useState(\"\");\r\n\r\n  let [events, setEvents] = useState([]);\r\n  const [lastStart, setLastStart] = useState(0);\r\n  const [timer, setTimer] = useState(\"\");\r\n\r\n  const startTimer = () => {\r\n    setTimerOn(true);\r\n    setTimerFinished(false);\r\n    setTimerTime(timerTime);\r\n    let startTime = Date.now() - timerTime;\r\n\r\n    setTimer(\r\n      setInterval(() => {\r\n        setTimerTime(Date.now() - startTime);\r\n      }, 10)\r\n    );\r\n  };\r\n\r\n  const pauseTimer = () => {\r\n    setTimerOn(false);\r\n    clearInterval(timer);\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setTimerTime(0);\r\n    setTimerFinished(false);\r\n\r\n    startEvents();\r\n  };\r\n\r\n  const startEvents = () => {\r\n    let localEvents = [...props.workout.exercises];\r\n\r\n    if (localEvents.length > 0) {\r\n      setCurrentExercise(localEvents.shift());\r\n    }\r\n    setEvents(localEvents);\r\n    setLastStart(0);\r\n  };\r\n\r\n  const workoutFinished = () => {\r\n    setTimerFinished(true);\r\n    pauseTimer();\r\n  };\r\n\r\n  const getNextExercise = () => {\r\n    let localEvents = [...events];\r\n    let nextExercise = localEvents.shift();\r\n    props.notifyChange();\r\n    setEvents(localEvents);\r\n    return nextExercise;\r\n  };\r\n\r\n  const changeExercise = (totalSeconds) => {\r\n    if (events.length === 0) {\r\n      workoutFinished();\r\n    } else {\r\n      setLastStart(totalSeconds);\r\n      setCurrentExercise(getNextExercise());\r\n    }\r\n  };\r\n\r\n  const handleUpdateSignal = () => {\r\n    pauseTimer();\r\n    resetTimer();\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleUpdateSignal();\r\n  }, [props.workout]);\r\n\r\n  let totalSeconds = Math.floor(timerTime / 1000);\r\n  let exerciseMilis = timerTime - lastStart * 1000;\r\n  let exerciseSeconds = Math.floor(exerciseMilis / 1000);\r\n  let exerciseLeft = currentExercise.duration - exerciseSeconds;\r\n\r\n  if (timerOn && exerciseSeconds >= currentExercise.duration) {\r\n    changeExercise(totalSeconds);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Stopwatch\" style={{ paddingTop: \"30px\" }}>\r\n      {timerTime === 0 && (\r\n        <div>\r\n          <h3>Ready to begin workout. Press start!</h3>\r\n        </div>\r\n      )}\r\n      {!timerFinished && (\r\n        <div>\r\n          <div>Current exercise:</div>\r\n          <Typography\r\n            variant=\"h2\"\r\n            style={{\r\n              paddingBottom: \"30px\",\r\n              margin: \"0\",\r\n            }}\r\n          >\r\n            {currentExercise.name}\r\n          </Typography>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Typography\r\n              variant=\"h4\"\r\n              style={{ position: \"absolute\", margin: 0 }}\r\n            >\r\n              {timeFormatter(exerciseLeft * 1000)}\r\n            </Typography>\r\n            <div style={{ position: \"absolute\" }}>\r\n              <CircularProgress\r\n                variant=\"static\"\r\n                value={\r\n                  100 -\r\n                  parseInt(exerciseMilis / (currentExercise.duration * 10))\r\n                }\r\n                size={200}\r\n                thickness={5}\r\n              />\r\n            </div>\r\n            <CircularProgress\r\n              variant=\"static\"\r\n              // Could make this value update with seconds. Better?\r\n              // TODO: Check which way users like best.\r\n              value={parseInt(timerTime / props.workout.duration / 10)}\r\n              size={250}\r\n              thickness={2}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ paddingTop: \"30px\" }}>\r\n            {getButtons(timerOn, timerTime, [\r\n              startTimer,\r\n              pauseTimer,\r\n              resetTimer,\r\n            ])}\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              marginTop: \"30px\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{ justifyContent: \"center\" }}\r\n            >\r\n              Time elapsed:\r\n              <h4 style={{ margin: 0, fontSize: \"20px\" }}>\r\n                {timeFormatter(timerTime)}\r\n              </h4>\r\n            </div>\r\n\r\n            <div style={{ minWidth: \"40px\" }} />\r\n\r\n            <div style={{ justifyContent: \"center\" }}>\r\n              Exercises left:\r\n              <h4 style={{ margin: 0, fontSize: \"20px\" }}>\r\n                {events.length + 1}/{props.workout.exercises.length}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {timerFinished && timerTime !== 0 && (\r\n        <div>\r\n          <h3>Workout done! Congratulations!</h3>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stopwatch;\r\n","/**\r\n * To be improved\r\n * [X] 1- Deal with different concat symbols\r\n *      (Difference between \",\" or \"+\"?)\r\n * [X] 2- Deal with different quotation marks\r\n *      (Convert all time to s)\r\n * [X] 3- Deal with exercise blocks\r\n *      (By simply looping over n times?)\r\n * [X] 4- Change \"x\"s for \"*\" where needed\r\n *      (If it is in the middle of an exercise, better not)\r\n * [ ] 5- Deal with comments for each exercise\r\n *      (Just adding them to the screen)\r\n * [ ] 6- Deal with intensity for each exercise\r\n *      (And then show some sort of indication)\r\n */\r\n\r\n/**\r\n * @desc Transforms the long string into an array of exercises\r\n * @param {string} input A correctly formatted workout session (see documentation)\r\n * @return {dict} A dict containing an array made up of a dict for each exercise and the total duration.\r\n */\r\nexport function inputToExerciseDict(input) {\r\n  let replaced = makeTextReplacements(input);\r\n  console.log(replaced);\r\n  let full = computeRepetition(replaced);\r\n  let splitted = full.split(\",\");\r\n\r\n  let exercises = [];\r\n  let totalSeconds = 0;\r\n\r\n  splitted.forEach((ex) => {\r\n    let exInSeconds = convertToSeconds(ex);\r\n    let [exDuration, exName] = exInSeconds.split('\"');\r\n    totalSeconds += parseInt(exDuration.trim());\r\n\r\n    let exercise = {\r\n      duration: exDuration.trim(),\r\n      name: exName.trim(),\r\n    };\r\n\r\n    exercises.push(exercise);\r\n  });\r\n\r\n  let workout = {\r\n    exercises: exercises,\r\n    duration: totalSeconds,\r\n  };\r\n\r\n  console.log(workout.duration);\r\n\r\n  return workout;\r\n}\r\n\r\n/**\r\n * @desc Replaces \"similar\" characters to help user input\r\n * @param {string} input\r\n * @return {string} Correctly replaced string\r\n */\r\nfunction makeTextReplacements(input) {\r\n  let first = input.replace(/\\+/g, \",\");\r\n  let second = first.replace(/[“”]/g, '\"');\r\n  let third = second.replace(/[[{]/g, \"(\");\r\n  let fourth = third.replace(/[\\]}]/g, \")\");\r\n  let fifth = replaceXs(fourth);\r\n  return fifth;\r\n}\r\n\r\nfunction replaceXs(input) {\r\n  for (var i = 0; i < input.length; i++) {\r\n    let c = input[i];\r\n    let replace = true;\r\n    if (c === \"x\") {\r\n      if (i - 1 >= 0) {\r\n        const prev = input[i - 1];\r\n        replace = !isLetter(prev);\r\n      }\r\n      if (i + 1 < input.length) {\r\n        const post = input[i + 1];\r\n        replace = replace && !isLetter(post);\r\n      }\r\n      if (replace) {\r\n        input = input.slice(0, i) + \"*\" + input.slice(i + 1);\r\n      }\r\n    }\r\n  }\r\n  return input;\r\n}\r\n\r\nfunction isLetter(char) {\r\n  return char.match(/[a-z]/i) !== null;\r\n}\r\n\r\n/**\r\n * @desc Expands the exercise blocks given in the input.\r\n * @param {string} input\r\n * @returns {string} with the blocks expanded\r\n */\r\nfunction computeRepetition(input) {\r\n  let multIndex = input.indexOf(\"*\");\r\n  while (input.indexOf(\"*\") !== -1) {\r\n    let first, times, block, last;\r\n    [first, times] = getNumReps(input, multIndex);\r\n    [last, block] = getBlock(input, multIndex);\r\n\r\n    let repeated = repeatBlock(block, times);\r\n\r\n    input = input.slice(0, first) + repeated + input.slice(last + 1);\r\n    multIndex = input.indexOf(\"*\");\r\n  }\r\n  return input;\r\n}\r\n\r\nfunction getNumReps(input, multIndex) {\r\n  let repetitions = [];\r\n  let currentIndex = multIndex;\r\n  let loop = true;\r\n\r\n  while (loop && currentIndex >= 0) {\r\n    currentIndex--;\r\n    repetitions.unshift(input[currentIndex]);\r\n    loop = isNumericChar(input[currentIndex - 1]) && currentIndex > 0;\r\n  }\r\n  if (repetitions.length === 0) {\r\n    // EXCEPTION\r\n    return \"\";\r\n  }\r\n  let numReps = repetitions.join(\"\").trim();\r\n  return [currentIndex, numReps];\r\n}\r\n\r\nfunction isNumericChar(char) {\r\n  return /^\\d$/.test(char);\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} input\r\n * @param {number} m\r\n */\r\nfunction getBlock(input, m) {\r\n  let indexOpen = input.indexOf(\"(\", m);\r\n  if (indexOpen === -1) {\r\n    // EXCEPTION\r\n    return \"\";\r\n  }\r\n  let currentIndex = indexOpen;\r\n  let numOpen = 1;\r\n  let loop = true;\r\n\r\n  while (loop) {\r\n    currentIndex++;\r\n    if (input[currentIndex] === \"(\") {\r\n      numOpen++;\r\n    } else if (input[currentIndex] === \")\") {\r\n      numOpen--;\r\n    }\r\n    loop = numOpen > 0 && currentIndex < input.length;\r\n  }\r\n  let block = input.slice(indexOpen + 1, currentIndex);\r\n  return [currentIndex, block];\r\n}\r\n\r\n/**\r\n * Repeat the block and add \", \" between reps\r\n * @param {string} block\r\n * @param {int} numTimes\r\n */\r\nfunction repeatBlock(block, numTimes) {\r\n  let repeatedBlock = \"\";\r\n  for (let i = numTimes; i > 0; i--) {\r\n    let added = i !== 1 ? \", \" : \"\";\r\n    repeatedBlock += block + added;\r\n  }\r\n  return repeatedBlock;\r\n}\r\n\r\n/**\r\n * @desc Converts excercice duration to seconds\r\n * @param {string} exercise in form: MM'SS\" exerciseName\r\n * @return The same exercise but with the duration in seconds\r\n */\r\nfunction convertToSeconds(exercise) {\r\n  let sIndex = exercise.indexOf('\"');\r\n  let mIndex = exercise.indexOf(\"'\");\r\n  if (mIndex === -1) {\r\n    return exercise;\r\n  } else if (sIndex === -1) {\r\n    let mins = exercise.slice(0, mIndex);\r\n    return (60 * mins).toString() + '\"' + exercise.slice(mIndex + 1);\r\n  } else {\r\n    let mins = exercise.slice(0, mIndex);\r\n    let secs = exercise.slice(mIndex + 1, sIndex);\r\n    let totalSeconds = 60 * mins + parseInt(secs);\r\n    return totalSeconds.toString() + '\"' + exercise.slice(sIndex + 1);\r\n  }\r\n}\r\n\r\nexport default inputToExerciseDict;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nimport Stopwatch from \"./Stopwatch\";\r\nimport inputToExerciseDict from \"./InputParser\";\r\n\r\nfunction FormHandler(props) {\r\n  let [textBox, setTextBox] = useState(\r\n    '15\" Squats + 2x(15\"Plank + 15\"Burpees) + 15\" Flex'\r\n  );\r\n  let [showEditing, setShowEditing] = useState(true);\r\n  let [workout, setWorkout] = useState({ exercises: [] });\r\n\r\n  const handleSubmit = useCallback(\r\n    (event) => {\r\n      setWorkout(inputToExerciseDict(textBox));\r\n      setShowEditing(false);\r\n\r\n      event.preventDefault();\r\n    },\r\n    [textBox, setWorkout, setShowEditing]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {showEditing && (\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <TextField\r\n              style={{\r\n                width: \"80%\",\r\n              }}\r\n              type=\"text\"\r\n              name=\"exercises\"\r\n              multiline\r\n              value={textBox}\r\n              onChange={(e) => {\r\n                setTextBox(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      )}\r\n\r\n      {!showEditing && (\r\n        <button onClick={() => setShowEditing(true)}>Edit exercises</button>\r\n      )}\r\n\r\n      {workout.exercises.length > 0 && (\r\n        <div>\r\n          <Stopwatch workout={workout} notifyChange={props.notifyChange} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormHandler;\r\n","import audio from \"../assets/bells.mp3\";\r\n\r\nexport function notifyChange() {\r\n  var audioF = new Audio(audio);\r\n  audioF.play();\r\n}\r\n\r\nexport default notifyChange;","import \"./App.css\";\r\nimport React from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nimport FormHandler from \"./components/FormHandler\";\r\nimport notifyChange from \"./components/ChangeNotifier\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Typography variant=\"h1\">WORKOUT TIMER</Typography>\r\n      <FormHandler notifyChange={notifyChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport \"typeface-montserrat\";\r\nimport \"typeface-inter\";\r\n\r\nconst lightTheme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: '\"Inter\", \"Montserrat\", sans-serif',\r\n    fontSize: 12,\r\n\r\n    h1: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 30,\r\n    },\r\n    h2: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 22,\r\n    },\r\n    h3: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 18,\r\n    },\r\n    subtitle1: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 14,\r\n    },\r\n  },\r\n\r\n  palette: {\r\n    primary: {\r\n      main: \"#333333\",\r\n    },\r\n    secondary: {\r\n      main: \"#727171\",\r\n    },\r\n    accent: {\r\n      main: \"#80d6d1\",\r\n    },\r\n    background: {\r\n      main: \"#f8f3f0\",\r\n      default: \"#f8f3f0\",\r\n    },\r\n    w: {\r\n      main: \"#ff5656\",\r\n    },\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={lightTheme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
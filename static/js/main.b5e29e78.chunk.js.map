{"version":3,"sources":["assets/bells.mp3","components/Stopwatch.js","components/InputParser.js","components/FormHandler.js","components/ChangeNotifier.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Stopwatch","props","state","timerOn","timerTime","timerStart","currentExercice","startTimer","setState","Date","now","timerFinished","timer","setInterval","i","stopTimer","clearInterval","resetTimer","startEvents","this","events","console","log","shift","length","lastStart","nextExercice","notifyChange","timeMilis","seconds","Math","floor","slice","minutes","hours","areExercicesUpdated","setExercicesUpdated","totalSeconds","exerciceMilis","exerciceSeconds","exerciceLeft","duration","exerciceProgress","changeExercice","exercice","className","style","margin","paddingBottom","justifyContent","display","toFixed","timeFormatter","onClick","Component","getBlock","input","m","indexOpen","indexOf","currentIndex","numOpen","loop","repeatBlock","block","numTimes","repeatedBlock","getNumReps","multIndex","char","repetitions","unshift","test","join","trim","getSeconds","split","getName","inputToExerciceArray","replaced","replace","makeTextReplacements","splitted","first","times","last","repeated","computeRepetition","exercices","forEach","ex","exInSeconds","sIndex","mIndex","toString","mins","secs","parseInt","convertToSeconds","push","FormHandler","exercicesUpdated","handleChange","event","textBox","target","value","handleSubmit","textInput","preventDefault","bind","onSubmit","type","name","onChange","number","Audio","audio","play","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5e29e78.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bells.b62cc0d9.mp3\";","import React, { Component } from \"react\";\r\n//import \"../App.css\";\r\n\r\nclass Stopwatch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startEvents();\r\n  }\r\n\r\n  state = {\r\n    timerOn: false,\r\n    timerTime: 0,\r\n    timerStart: 0,\r\n    currentExercice: \"\",\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: Date.now() - this.state.timerTime,\r\n      timerFinished: false,\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        timerTime: Date.now() - this.state.timerStart,\r\n      });\r\n    }, 10);\r\n    this.i = 0;\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ timerOn: false });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: 0,\r\n      timerTime: 0,\r\n      timerFinished: false,\r\n    });\r\n    this.startEvents();\r\n  };\r\n\r\n  startEvents() {\r\n    // Initialize the loop:\r\n    this.events = [...this.props.events];\r\n    console.log(\"Events:\", this.events);\r\n\r\n    // Assign the first exercice after checking it exists\r\n    this.currentExercice = this.events.shift() || this.events.length > 0;\r\n\r\n    // this.state.timerTime = 0;\r\n    this.setState({ timerTime: 0 });\r\n    this.lastStart = 0;\r\n  }\r\n\r\n  changeExercice() {\r\n    var nextExercice = this.events.shift();\r\n    console.log(nextExercice);\r\n    this.props.notifyChange();\r\n    return nextExercice;\r\n  }\r\n\r\n  /**\r\n   * Formats the given time to a string (HH :) MM : SS\r\n   * @param {Time to be formatted in milliseconds} timeMilis\r\n   */\r\n  timeFormatter(timeMilis) {\r\n    //let deciseconds = (\"0\" + (Math.floor(timeMilis / 100) % 10)).slice(-1);\r\n    let seconds = (\"0\" + (Math.floor(timeMilis / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timeMilis / 60000) % 60)).slice(-2);\r\n    let hours = (\"0\" + Math.floor(timeMilis / 3600000)).slice(-2);\r\n\r\n    let output = \"\";\r\n    if (hours === \"00\") {\r\n      output = minutes + \" : \" + seconds;\r\n    } else {\r\n      output = hours + \" : \" + minutes + \" : \" + seconds;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.areExercicesUpdated) {\r\n      console.log(\"Update signal recieved\");\r\n      this.props.setExercicesUpdated(false);\r\n      this.startEvents();\r\n      console.log(\"Exercices updated\");\r\n    }\r\n\r\n    const { timerTime } = this.state;\r\n\r\n    let totalSeconds = Math.floor(timerTime / 1000);\r\n    let exerciceMilis = timerTime - this.lastStart * 1000;\r\n\r\n    let exerciceSeconds = Math.floor(exerciceMilis / 1000);\r\n    let exerciceLeft = this.currentExercice.duration - exerciceSeconds;\r\n    let exerciceProgress =\r\n      exerciceMilis / (this.currentExercice.duration * 1000);\r\n\r\n    if (this.state.timerOn === true) {\r\n      if (exerciceSeconds >= this.currentExercice.duration) {\r\n        if (this.events.length === 0) {\r\n          this.setState({ timerFinished: true });\r\n          this.stopTimer();\r\n        } else {\r\n          this.lastStart = totalSeconds;\r\n          this.currentExercice = this.changeExercice();\r\n\r\n          console.log(\"Exercice changed to: \", this.currentExercice.exercice);\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"Stopwatch\">\r\n        {this.state.timerTime === 0 && (\r\n          <div>\r\n            <h3>Ready to begin workout. Press start!</h3>\r\n          </div>\r\n        )}\r\n\r\n        {!this.state.timerFinished && (\r\n          <div>\r\n            <div>Exercices left: {this.events.length + 1}</div>\r\n\r\n            <div>Current exercice:</div>\r\n            <h2 style={{ margin: 0, paddingBottom: \"30px\" }}>\r\n              {this.currentExercice.exercice}\r\n            </h2>\r\n\r\n            <div style={{ justifyContent: \"center\", display: \"flex\" }}>\r\n              <h4 style={{ margin: 0 }}>Exercice progress: </h4>\r\n              &nbsp;&nbsp;\r\n              {(exerciceProgress * 100).toFixed(0)} %\r\n            </div>\r\n\r\n            <div style={{ justifyContent: \"center\", display: \"flex\" }}>\r\n              <h4 style={{ margin: 0 }}>Exercice time: </h4>\r\n              &nbsp;&nbsp;\r\n              {this.timeFormatter(exerciceLeft * 1000)}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {this.state.timerFinished && this.state.timerTime !== 0 && (\r\n          <div>\r\n            <h3>Workout done! Congratulations!</h3>\r\n          </div>\r\n        )}\r\n\r\n        <div\r\n          className=\"Stopwatch-display\"\r\n          style={{ justifyContent: \"center\", display: \"flex\" }}\r\n        >\r\n          <h4 style={{ margin: 0 }}>Total time: </h4>\r\n          &nbsp;&nbsp;\r\n          {this.timeFormatter(timerTime)}\r\n        </div>\r\n\r\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\r\n          <button onClick={this.startTimer}>Start</button>\r\n        )}\r\n        {this.state.timerOn === true && (\r\n          <button onClick={this.stopTimer}>Pause</button>\r\n        )}\r\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n          <button onClick={this.startTimer}>Resume</button>\r\n        )}\r\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n          <button onClick={this.resetTimer}>Reset</button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;\r\n","/**\r\n * To be improved\r\n * [X] 1- Deal with different concat symbols\r\n *      (Difference between \",\" or \"+\"?)\r\n * [X] 2- Deal with different quotation marks\r\n *      (Convert all time to s)\r\n * [X] 3- Deal with exercice blocks\r\n *      (By simply looping over n times?)\r\n * [ ] 4- Change \"x\"s for \"*\" where needed\r\n *      (If it is in the middle of an exercice, better not)\r\n * [ ] 5- Deal with comments for each exercice\r\n *      (Just adding them to the screen)\r\n * [ ] 6- Deal with intensity for each exercice\r\n *      (And then show some sort of indication)\r\n */\r\n\r\n/**\r\n * @desc Replaces \"similar\" characters to help user input\r\n * @param {string} input\r\n * @return Correctly replaced string\r\n */\r\nfunction makeTextReplacements(input) {\r\n  let first = input.replace(/\\+/g, \",\");\r\n  let second = first.replace(/[“”]/g, '\"');\r\n  let third = second.replace(/[[{]/g, \"(\");\r\n  let fourth = third.replace(/[\\]}]/g, \")\");\r\n  return fourth;\r\n}\r\n\r\n\r\nfunction computeRepetition(input) {\r\n  let multIndex = input.indexOf(\"*\");\r\n  while (input.indexOf(\"*\") !== -1) {\r\n    let first, times, block, last\r\n    [first, times] = getNumReps(input, multIndex);\r\n    [last, block] = getBlock(input, multIndex);\r\n  \r\n    let repeated = repeatBlock(block, times);\r\n    \r\n    input = input.slice(0,first) + repeated + input.slice(last+1);\r\n    multIndex = input.indexOf(\"*\");\r\n  }\r\n  return input;\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} input\r\n * @param {number} m\r\n */\r\nfunction getBlock(input, m) {\r\n  let indexOpen = input.indexOf(\"(\", m);\r\n  if (indexOpen === -1) {\r\n    // EXCEPTION\r\n    return \"\";\r\n  }\r\n  let currentIndex = indexOpen;\r\n  let numOpen = 1;\r\n  let loop = true;\r\n\r\n  while (loop) {\r\n    currentIndex++;\r\n    if (input[currentIndex] === \"(\") {\r\n      numOpen++;\r\n    } else if (input[currentIndex] === \")\") {\r\n      numOpen--;\r\n    }\r\n    loop = numOpen > 0 && currentIndex < input.length;\r\n  }\r\n  let block = input.slice(indexOpen + 1, currentIndex);\r\n  return [currentIndex, block];\r\n}\r\n\r\n/**\r\n * Repeat the block and add \", \" between reps\r\n * @param {string} block \r\n * @param {int} numTimes \r\n */\r\nfunction repeatBlock(block, numTimes) {\r\n  let repeatedBlock = \"\";\r\n  for (let i = numTimes; i > 0; i--) {\r\n    let added = i !== 1 ? \", \" : \"\";\r\n    repeatedBlock += block + added;\r\n  }\r\n  return repeatedBlock;\r\n}\r\n\r\n\r\n\r\nfunction getNumReps(input, multIndex) {\r\n  let repetitions = [];\r\n  let currentIndex = multIndex;\r\n  let loop = true;\r\n\r\n  while (loop && currentIndex >= 0) {\r\n    currentIndex--;\r\n    // console.log(input[currentIndex]);\r\n    repetitions.unshift(input[currentIndex]);\r\n    loop = isNumericChar(input[currentIndex - 1]) && currentIndex > 0;\r\n  }\r\n  if (repetitions.length === 0) {\r\n    // EXCEPTION\r\n    return \"\";\r\n  }\r\n  let numReps = repetitions.join(\"\").trim();\r\n  return [currentIndex, numReps];\r\n}\r\n\r\nfunction isNumericChar(char) {\r\n  return /^\\d$/.test(char);\r\n}\r\n\r\n/**\r\n * @desc Converts excercice duration to seconds\r\n * @param {string} exercice in form: MM'SS\" exerciceName\r\n * @return The same exercice but with the duration in seconds\r\n */\r\nfunction convertToSeconds(exercice) {\r\n  let sIndex = exercice.indexOf('\"');\r\n  let mIndex = exercice.indexOf(\"'\");\r\n  if (mIndex === -1) {\r\n    return exercice;\r\n  } else if (sIndex === -1) {\r\n    let mins = exercice.slice(0, mIndex);\r\n    return (60 * mins).toString() + '\"' + exercice.slice(mIndex + 1);\r\n  } else {\r\n    let mins = exercice.slice(0, mIndex);\r\n    let secs = exercice.slice(mIndex + 1, sIndex);\r\n    let totalSeconds = 60 * mins + parseInt(secs);\r\n    return totalSeconds.toString() + '\"' + exercice.slice(sIndex + 1);\r\n  }\r\n}\r\n\r\nfunction getSeconds(exercice) {\r\n  let divided = exercice.split('\"');\r\n  return divided[0].trim();\r\n}\r\n\r\nfunction getName(exercice) {\r\n  let divided = exercice.split('\"');\r\n  return divided[1].trim();\r\n}\r\n\r\n/**\r\n * @desc Transforms the long string into an array of exercices\r\n * @param {string} input A correctly formatted exercice session (see documentation)\r\n * @return The array containing a dict for each exercice\r\n */\r\nexport function inputToExerciceArray(input) {\r\n  let replaced = makeTextReplacements(input);\r\n  console.log(replaced);\r\n  let full = computeRepetition(replaced);\r\n  let splitted = full.split(\",\");\r\n\r\n  let exercices = [];\r\n\r\n  splitted.forEach((ex) => {\r\n    let exInSeconds = convertToSeconds(ex);\r\n\r\n    let exercice = {\r\n      duration: getSeconds(exInSeconds),\r\n      exercice: getName(exInSeconds),\r\n    };\r\n\r\n    exercices.push(exercice);\r\n  });\r\n\r\n  return exercices;\r\n}\r\n\r\nexport default inputToExerciceArray;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Stopwatch from \"./Stopwatch\";\r\nimport inputToExerciceArray from \"./InputParser\";\r\n\r\nclass FormHandler extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      textBox: \"\",\r\n      textInput: \"\",\r\n      exercicesUpdated: false,\r\n      exercices: [],\r\n    };\r\n\r\n    this.state.textBox = '5\" squats, 2* (2*(5\"plank)), 5\" flex';\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  setExercicesUpdated = (state) => {\r\n    this.setState({ exercicesUpdated: state });\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ textBox: event.target.value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    this.setState({\r\n      textInput: this.state.textBox,\r\n      exercices: inputToExerciceArray(this.state.textBox),\r\n      exercicesUpdated: true,\r\n    });\r\n    console.log(this.state.exercices);\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <textarea\r\n            type=\"text\"\r\n            name=\"exercices\"\r\n            value={this.state.textBox}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n\r\n        {this.state.exercices.length > 0 && (\r\n          <div>\r\n            <p>Input exercices: {this.state.textInput}</p>\r\n\r\n            <Stopwatch\r\n              number={this.state.number}\r\n              events={this.state.exercices}\r\n              areExercicesUpdated={this.state.areExercicesUpdated}\r\n              setExercicesUpdated={this.setExercicesUpdated}\r\n              notifyChange={this.props.notifyChange}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormHandler;\r\n","import audio from \"../assets/bells.mp3\";\r\n\r\nexport function notifyChange() {\r\n  var audioF = new Audio(audio);\r\n  audioF.play();\r\n}\r\n\r\nexport default notifyChange;","import \"./App.css\";\r\nimport React from \"react\";\r\n\r\nimport FormHandler from \"./components/FormHandler\";\r\nimport notifyChange from \"./components/ChangeNotifier\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <FormHandler notifyChange={notifyChange}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
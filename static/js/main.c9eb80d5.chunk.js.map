{"version":3,"sources":["components/Stopwatch.js","events.js","components/InputHandler.js","App.js","serviceWorker.js","index.js"],"names":["Stopwatch","props","state","timerOn","timerTime","timerStart","currentExercice","startTimer","setState","Date","now","timer","setInterval","i","stopTimer","clearInterval","resetTimer","startEvents","this","events","console","log","length","shift","lastStart","nextExercice","timeMilis","seconds","Math","floor","slice","minutes","hours","totalSeconds","exerciceMilis","exerciceSeconds","exerciceLeft","duration","exerciceProgress","changeExercice","exercice","className","style","margin","paddingBottom","justifyContent","display","toFixed","timeFormatter","onClick","Component","InputHandler","handleChange","event","textBox","target","value","handleSubmit","username","preventDefault","bind","onSubmit","type","name","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9eb80d5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n//import \"../App.css\";\r\n\r\nclass Stopwatch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startEvents();\r\n  }\r\n\r\n  state = {\r\n    timerOn: false,\r\n    timerTime: 0,\r\n    timerStart: 0,\r\n    currentExercice: \"\",\r\n  };\r\n\r\n  startTimer = () => {\r\n    this.setState({\r\n      timerOn: true,\r\n      timerTime: this.state.timerTime,\r\n      timerStart: Date.now() - this.state.timerTime,\r\n    });\r\n    this.timer = setInterval(() => {\r\n      this.setState({\r\n        timerTime: Date.now() - this.state.timerStart,\r\n      });\r\n    }, 10);\r\n    this.i = 0;\r\n  };\r\n\r\n  stopTimer = () => {\r\n    this.setState({ timerOn: false });\r\n    clearInterval(this.timer);\r\n  };\r\n\r\n  resetTimer = () => {\r\n    this.setState({\r\n      timerStart: 0,\r\n      timerTime: 0,\r\n    });\r\n    this.startEvents();\r\n  };\r\n\r\n  startEvents() {\r\n    // Initialize the loop:\r\n    this.events = [...this.props.events];\r\n    console.log(\"Events:\");\r\n    console.log(this.events);\r\n    console.log(this.events.length);\r\n\r\n    // Assign the first two exercices after checking they exist\r\n    this.currentExercice = this.events.shift() || this.events.length > 0;\r\n\r\n    this.lastStart = 0;\r\n  }\r\n\r\n  changeExercice() {\r\n    var nextExercice = this.events.shift();\r\n    console.log(nextExercice);\r\n    return nextExercice;\r\n  }\r\n\r\n  /**\r\n   * Formats the given time to a string (HH) : MM : SS\r\n   * @param {Time to be formatted in milliseconds} timeMilis \r\n   */\r\n  timeFormatter(timeMilis) {\r\n    //let deciseconds = (\"0\" + (Math.floor(timeMilis / 100) % 10)).slice(-1);\r\n    let seconds = (\"0\" + (Math.floor(timeMilis / 1000) % 60)).slice(-2);\r\n    let minutes = (\"0\" + (Math.floor(timeMilis / 60000) % 60)).slice(-2);\r\n    let hours = (\"0\" + Math.floor(timeMilis / 3600000)).slice(-2);\r\n\r\n    let output = \"\";\r\n    if (hours !== \"00\") {\r\n      output = hours + \" : \" + minutes + \" : \" + seconds;\r\n    } else {\r\n      output = minutes + \" : \" + seconds;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  render() {\r\n    const { timerTime } = this.state;\r\n\r\n    let totalSeconds = Math.floor(timerTime / 1000);\r\n    let exerciceMilis = timerTime - this.lastStart * 1000;\r\n\r\n    let exerciceSeconds = Math.floor(exerciceMilis / 1000);\r\n    let exerciceLeft = this.currentExercice.duration - exerciceSeconds;\r\n    let exerciceProgress = 0;\r\n\r\n    if (this.state.timerOn === true) {\r\n      if (exerciceSeconds >= this.currentExercice.duration) {\r\n        if (this.events.length === 0) {\r\n          this.stopTimer();\r\n        } else {\r\n          this.lastStart = totalSeconds;\r\n          this.currentExercice = this.changeExercice();\r\n\r\n          console.log(\"Exercice changed to: \", this.currentExercice.exercice);\r\n        }\r\n      }\r\n\r\n      exerciceProgress = exerciceMilis / (this.currentExercice.duration * 1000);\r\n    }\r\n\r\n    return (\r\n      <div className=\"Stopwatch\">\r\n        <div>Current exercice:</div>\r\n        <h2 style={{ margin: 0, paddingBottom: \"30px\" }}>\r\n          {this.currentExercice.exercice}\r\n        </h2>\r\n        <div style={{ justifyContent: \"center\", display: \"flex\" }}>\r\n          <h4 style={{ margin: 0 }}>Exercice progress: </h4>\r\n          &nbsp;\r\n          {(exerciceProgress * 100).toFixed(0)} %\r\n        </div>\r\n\r\n        <div style={{ justifyContent: \"center\", display: \"flex\" }}>\r\n          <h4 style={{ margin: 0 }}>Exercice time: </h4>\r\n          &nbsp;&nbsp;\r\n          {this.timeFormatter(exerciceLeft * 1000)}\r\n        </div>\r\n        <div\r\n          className=\"Stopwatch-display\"\r\n          style={{ justifyContent: \"center\", display: \"flex\" }}\r\n        >\r\n          <h4 style={{ margin: 0 }}>Total time: </h4>\r\n          &nbsp;&nbsp;\r\n          {this.timeFormatter(timerTime)}\r\n        </div>\r\n\r\n        {this.state.timerOn === false && this.state.timerTime === 0 && (\r\n          <button onClick={this.startTimer}>Start</button>\r\n        )}\r\n        {this.state.timerOn === true && (\r\n          <button onClick={this.stopTimer}>Pause</button>\r\n        )}\r\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n          <button onClick={this.startTimer}>Resume</button>\r\n        )}\r\n        {this.state.timerOn === false && this.state.timerTime > 0 && (\r\n          <button onClick={this.resetTimer}>Reset</button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;\r\n","const ex0 = {\r\n  duration: 15,\r\n  exercice: \"Squats\",\r\n};\r\n\r\nconst ex1 = {\r\n  duration: 10,\r\n  exercice: \"High Plank\",\r\n};\r\n\r\nconst ex2 = {\r\n  duration: 10,\r\n  exercice: \"Burpees\",\r\n};\r\n\r\nconst ex3 = {\r\n  duration: 15,\r\n  exercice: \"Low Plank\",\r\n};\r\n\r\nconst events = [ex0, ex1, ex2, ex3];\r\n\r\nexport default events;\r\n","import React, { Component } from \"react\";\r\n\r\nclass InputHandler extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { textBox: \"\", username: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({ textBox: event.target.value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    this.setState({username: this.state.textBox});\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            value={this.state.textBox}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n        \r\n        <p>Your username is: {this.state.username}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputHandler;","import \"./App.css\";\r\nimport React from \"react\";\r\n\r\nimport Stopwatch from \"./components/Stopwatch\";\r\nimport events from \"./events\";\r\nimport InputHandler from \"./components/InputHandler\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <InputHandler />\r\n      <Stopwatch events={events} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
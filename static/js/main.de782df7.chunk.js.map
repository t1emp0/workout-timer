{"version":3,"sources":["assets/bells.mp3","components/InputParser.js","components/FormHandler.js","components/ControlButtons.js","components/Stopwatch.js","components/HelpAndInfo.js","components/Popup.js","components/Settings.js","components/ChangeNotifier.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isLetter","char","match","getNumReps","input","multIndex","repetitions","currentIndex","loop","unshift","test","length","join","trim","getBlock","m","indexOpen","indexOf","numOpen","slice","repeatBlock","block","numTimes","repeatedBlock","i","inputToExerciseDict","splitted","first","times","last","repeated","computeRepetition","c","replace","prev","post","replaceXs","makeTextReplacements","split","exercises","totalSeconds","forEach","ex","exercise","sIndex","mIndex","toString","mins","secs","parseInt","convertToSeconds","exDuration","exName","duration","name","push","useStyles","makeStyles","theme","root","display","width","maxWidth","workoutInput","buttonsRow","justifyContent","margin","submitButton","alignSelf","position","backgroundColor","settingsButton","marginLeft","settingsIcon","fontSize","submitText","color","FormHandler","props","classes","useState","textBox","setTextBox","showEditing","setShowEditing","handleSubmit","useCallback","event","exerciceDict","setWorkout","toggleShowEditing","preventDefault","className","onSubmit","TextField","type","id","multiline","value","onChange","e","target","Button","Typography","onClick","IconButton","openSettings","iconButton","controlIcon","distributingDiv","buttonsSeparationDiv","minWidth","ControlButons","timerState","status","startTimer","controlFunctions","pauseTimer","resetTimer","aria-label","getButtons","alignItems","paddingTop","paddingRight","paddingLeft","currentExerciseLabel","textAlign","currentExerciseText","paddingBottom","exerciseTimeContainer","exerciseTimeText","fontWeight","excerciseProgressContainer","buttonRow","marginTop","extraInfoContainer","extraInfoText","extraInfoSeparation","timeFormatter","timeMilis","seconds","Math","floor","minutes","hours","timerOn","timerTime","timerFinished","getTimerState","Stopwatch","setTimerOn","setTimerTime","setTimerFinished","currentExercise","setCurrentExercise","events","setEvents","lastStart","setLastStart","timer","setTimer","startTime","Date","now","setInterval","clearInterval","startEvents","localEvents","workout","shift","useEffect","exerciseMilis","exerciseSeconds","exerciseLeft","notifyChange","nextExercise","getNextExercise","changeExercise","variant","CircularProgress","excerciseProgress","size","thickness","totalProgress","helpAndInfo","panelDetails","text","marginBottom","instructionList","listItem","HelpAndInfo","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpansionPanelDetails","href","modal","zIndex","height","modal_content","palette","background","default","opacity","top","transform","padding","borderRadius","close","inside","PopUp","node","useRef","handleClose","toggle","handleClick","current","contains","console","log","document","addEventListener","removeEventListener","ref","style","grid","spacing","justify","Settings","funcs","volumeActive","setVolumeActive","volume","setVolume","previousVolume","Grid","container","item","Switch","checked","xs","Slider","disabled","defaultValue","newVolume","aria-labelledby","vol","volEnabled","audioF","Audio","src","audio","load","play","app","minHeight","content","title","userSelect","App","settingsEnabled","setSettingsEnabled","volumeEnabled","togglePopUp","Boolean","window","location","hostname","lightTheme","createMuiTheme","typography","fontFamily","h1","h2","h3","h6","subtitle1","primary","main","secondary","accent","w","ReactDOM","render","StrictMode","ThemeProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de782df7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bells.b62cc0d9.mp3\";","/**\r\n * To be improved\r\n * [X] 1- Deal with different concat symbols\r\n *      (Difference between \",\" or \"+\"?)\r\n * [X] 2- Deal with different quotation marks\r\n *      (Convert all time to s)\r\n * [X] 3- Deal with exercise blocks\r\n *      (By simply looping over n times?)\r\n * [X] 4- Change \"x\"s for \"*\" where needed\r\n *      (If it is in the middle of an exercise, better not)\r\n * [ ] 5- Deal with comments for each exercise\r\n *      (Just adding them to the screen)\r\n * [ ] 6- Deal with intensity for each exercise\r\n *      (And then show some sort of indication)\r\n */\r\n\r\n/**\r\n * @desc Transforms the long string into an array of exercises\r\n * @param {string} input A correctly formatted workout session (see documentation)\r\n * @return {dict} A dict containing an array made up of a dict for each exercise and the total duration.\r\n */\r\nexport function inputToExerciseDict(input) {\r\n  let replaced = makeTextReplacements(input);\r\n  // console.log(replaced);\r\n  let full = computeRepetition(replaced);\r\n  let splitted = full.split(\",\");\r\n\r\n  let exercises = [];\r\n  let totalSeconds = 0;\r\n\r\n  splitted.forEach((ex) => {\r\n    let exInSeconds = convertToSeconds(ex);\r\n    let [exDuration, exName] = exInSeconds.split('\"');\r\n    totalSeconds += parseInt(exDuration.trim());\r\n\r\n    let exercise = {\r\n      duration: exDuration.trim(),\r\n      name: exName.trim(),\r\n    };\r\n\r\n    exercises.push(exercise);\r\n  });\r\n\r\n  let workout = {\r\n    exercises: exercises,\r\n    duration: totalSeconds,\r\n  };\r\n\r\n  // console.log(workout.duration);\r\n\r\n  return workout;\r\n}\r\n\r\n/**\r\n * @desc Replaces \"similar\" characters to help user input\r\n * @param {string} input\r\n * @return {string} Correctly replaced string\r\n */\r\nfunction makeTextReplacements(input) {\r\n  let first = input.replace(/\\+/g, \",\");\r\n  let second = first.replace(/[“”]/g, '\"');\r\n  let third = second.replace(/[[{]/g, \"(\");\r\n  let fourth = third.replace(/[\\]}]/g, \")\");\r\n  let fifth = replaceXs(fourth);\r\n  return fifth;\r\n}\r\n\r\nfunction replaceXs(input) {\r\n  for (var i = 0; i < input.length; i++) {\r\n    let c = input[i];\r\n    let replace = true;\r\n    if (c === \"x\") {\r\n      if (i - 1 >= 0) {\r\n        const prev = input[i - 1];\r\n        replace = !isLetter(prev);\r\n      }\r\n      if (i + 1 < input.length) {\r\n        const post = input[i + 1];\r\n        replace = replace && !isLetter(post);\r\n      }\r\n      if (replace) {\r\n        input = input.slice(0, i) + \"*\" + input.slice(i + 1);\r\n      }\r\n    }\r\n  }\r\n  return input;\r\n}\r\n\r\nfunction isLetter(char) {\r\n  return char.match(/[a-z]/i) !== null;\r\n}\r\n\r\n/**\r\n * @desc Expands the exercise blocks given in the input.\r\n * @param {string} input\r\n * @returns {string} with the blocks expanded\r\n */\r\nfunction computeRepetition(input) {\r\n  let multIndex = input.indexOf(\"*\");\r\n  while (input.indexOf(\"*\") !== -1) {\r\n    let first, times, block, last;\r\n    [first, times] = getNumReps(input, multIndex);\r\n    [last, block] = getBlock(input, multIndex);\r\n\r\n    let repeated = repeatBlock(block, times);\r\n\r\n    input = input.slice(0, first) + repeated + input.slice(last + 1);\r\n    multIndex = input.indexOf(\"*\");\r\n  }\r\n  return input;\r\n}\r\n\r\nfunction getNumReps(input, multIndex) {\r\n  let repetitions = [];\r\n  let currentIndex = multIndex;\r\n  let loop = true;\r\n\r\n  while (loop && currentIndex >= 0) {\r\n    currentIndex--;\r\n    repetitions.unshift(input[currentIndex]);\r\n    loop = isNumericChar(input[currentIndex - 1]) && currentIndex > 0;\r\n  }\r\n  if (repetitions.length === 0) {\r\n    // EXCEPTION\r\n    return \"\";\r\n  }\r\n  let numReps = repetitions.join(\"\").trim();\r\n  return [currentIndex, numReps];\r\n}\r\n\r\nfunction isNumericChar(char) {\r\n  return /^\\d$/.test(char);\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} input\r\n * @param {number} m\r\n */\r\nfunction getBlock(input, m) {\r\n  let indexOpen = input.indexOf(\"(\", m);\r\n  if (indexOpen === -1) {\r\n    // EXCEPTION\r\n    return \"\";\r\n  }\r\n  let currentIndex = indexOpen;\r\n  let numOpen = 1;\r\n  let loop = true;\r\n\r\n  while (loop) {\r\n    currentIndex++;\r\n    if (input[currentIndex] === \"(\") {\r\n      numOpen++;\r\n    } else if (input[currentIndex] === \")\") {\r\n      numOpen--;\r\n    }\r\n    loop = numOpen > 0 && currentIndex < input.length;\r\n  }\r\n  let block = input.slice(indexOpen + 1, currentIndex);\r\n  return [currentIndex, block];\r\n}\r\n\r\n/**\r\n * Repeat the block and add \", \" between reps\r\n * @param {string} block\r\n * @param {int} numTimes\r\n */\r\nfunction repeatBlock(block, numTimes) {\r\n  let repeatedBlock = \"\";\r\n  for (let i = numTimes; i > 0; i--) {\r\n    let added = i !== 1 ? \", \" : \"\";\r\n    repeatedBlock += block + added;\r\n  }\r\n  return repeatedBlock;\r\n}\r\n\r\n/**\r\n * @desc Converts excercice duration to seconds\r\n * @param {string} exercise in form: MM'SS\" exerciseName\r\n * @return The same exercise but with the duration in seconds\r\n */\r\nfunction convertToSeconds(exercise) {\r\n  let sIndex = exercise.indexOf('\"');\r\n  let mIndex = exercise.indexOf(\"'\");\r\n  if (mIndex === -1) {\r\n    return exercise;\r\n  } else if (sIndex === -1) {\r\n    let mins = exercise.slice(0, mIndex);\r\n    return (60 * mins).toString() + '\"' + exercise.slice(mIndex + 1);\r\n  } else {\r\n    let mins = exercise.slice(0, mIndex);\r\n    let secs = exercise.slice(mIndex + 1, sIndex);\r\n    let totalSeconds = 60 * mins + parseInt(secs);\r\n    return totalSeconds.toString() + '\"' + exercise.slice(sIndex + 1);\r\n  }\r\n}\r\n\r\nexport default inputToExerciseDict;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { TextField, Button, Typography, IconButton } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport inputToExerciseDict from \"./InputParser\";\r\n\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"inline-block\",\r\n    width: \"80%\",\r\n    maxWidth: 505,\r\n  },\r\n  workoutInput: {\r\n    width: \"100%\",\r\n  },\r\n  buttonsRow: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    margin: \"auto\",\r\n  },\r\n  submitButton: {\r\n    alignSelf: \"center\",\r\n    position: \"absolute\",\r\n    backgroundColor: \"rgba(46,151,255,0.75)\",\r\n  },\r\n  settingsButton: {\r\n    marginLeft: \"auto\",\r\n  },\r\n  settingsIcon: {\r\n    fontSize: 32,\r\n  },\r\n  submitText: {\r\n    color: \"#000000\",\r\n  },\r\n}));\r\n\r\nfunction FormHandler(props) {\r\n  const classes = useStyles();\r\n\r\n  let [textBox, setTextBox] = useState(\r\n    // '5\" Squats + 3x(5\" Plank)'\r\n    '15\" Squats + \\n2x(15\"Plank + 15\"Burpees) + \\n15\" Lunges'\r\n  );\r\n  let [showEditing, setShowEditing] = useState(true);\r\n\r\n  const handleSubmit = useCallback(\r\n    // TODO: Add warning if workout already started.\r\n    (event) => {\r\n      let exerciceDict = inputToExerciseDict(textBox);\r\n      props.setWorkout(exerciceDict);\r\n      toggleShowEditing();\r\n\r\n      event.preventDefault();\r\n    },\r\n    [textBox, props, setShowEditing]\r\n  );\r\n\r\n  const toggleShowEditing = () => {\r\n    setShowEditing(!showEditing);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <form onSubmit={handleSubmit}>\r\n        {showEditing && (\r\n          <TextField\r\n            className={classes.workoutInput}\r\n            type=\"text\"\r\n            name=\"exercises\"\r\n            id=\"inputExercises\"\r\n            multiline\r\n            value={textBox}\r\n            onChange={(e) => {\r\n              setTextBox(e.target.value);\r\n            }}\r\n          />\r\n        )}\r\n\r\n        <div className={classes.buttonsRow}>\r\n          {showEditing ? (\r\n            <Button\r\n              className={classes.submitButton}\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n            >\r\n              <Typography className={classes.submitText}>SUBMIT</Typography>\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              className={classes.submitButton}\r\n              onClick={() => toggleShowEditing()}\r\n            >\r\n              <Typography className={classes.submitText}>\r\n                Edit workout\r\n              </Typography>\r\n            </Button>\r\n          )}\r\n          <IconButton\r\n            onClick={props.openSettings}\r\n            className={classes.settingsButton}\r\n          >\r\n            <SettingsIcon className={classes.settingsIcon} />\r\n          </IconButton>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FormHandler;\r\n","import React from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconButton: {\r\n    // padding: 0,\r\n  },\r\n  controlIcon: {\r\n    fontSize: 32,\r\n  },\r\n  distributingDiv: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  buttonsSeparationDiv: {\r\n    minWidth: \"30px\",\r\n  },\r\n}));\r\n\r\nfunction getButtons(classes, status, startTimer, pauseTimer, resetTimer) {\r\n  switch (status) {\r\n    case \"Playing\":\r\n      return (\r\n        <IconButton\r\n          className={classes.iconButton}\r\n          aria-label=\"pause\"\r\n          onClick={pauseTimer}\r\n        >\r\n          <PauseIcon className={classes.controlIcon} />\r\n        </IconButton>\r\n      );\r\n    case \"Paused\":\r\n      return (\r\n        <div className={classes.distributingDiv}>\r\n          <IconButton\r\n            className={classes.iconButton}\r\n            aria-label=\"play\"\r\n            onClick={startTimer}\r\n          >\r\n            <PlayArrowIcon className={classes.controlIcon} />\r\n          </IconButton>\r\n\r\n          <div className={classes.buttonsSeparationDiv} />\r\n\r\n          <IconButton\r\n            className={classes.iconButton}\r\n            aria-label=\"reset\"\r\n            onClick={resetTimer}\r\n          >\r\n            <ReplayIcon className={classes.controlIcon} />\r\n          </IconButton>\r\n        </div>\r\n      );\r\n    case \"Finished\":\r\n      return (\r\n        <IconButton\r\n          className={classes.iconButton}\r\n          aria-label=\"reset\"\r\n          onClick={resetTimer}\r\n        >\r\n          <ReplayIcon className={classes.controlIcon} />\r\n        </IconButton>\r\n      );\r\n    // case \"Not started\"\r\n    default:\r\n      return (\r\n        <IconButton\r\n          className={classes.iconButton}\r\n          aria-label=\"play\"\r\n          onClick={startTimer}\r\n        >\r\n          <PlayArrowIcon className={classes.controlIcon} />\r\n        </IconButton>\r\n      );\r\n  }\r\n}\r\n\r\nfunction ControlButons(props) {\r\n  const timerState = props.status;\r\n  const startTimer = props.controlFunctions[0];\r\n  const pauseTimer = props.controlFunctions[1];\r\n  const resetTimer = props.controlFunctions[2];\r\n\r\n  const classes = useStyles();\r\n\r\n  return getButtons(classes, timerState, startTimer, pauseTimer, resetTimer);\r\n}\r\n\r\nexport default ControlButons;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Typography, CircularProgress } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport ControlButons from \"./ControlButtons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingTop: \"3vh\",\r\n    paddingRight: \"20px\",\r\n    paddingLeft: \"20px\",\r\n  },\r\n  currentExerciseLabel: {\r\n    margin: 0,\r\n    textAlign: \"left\",\r\n  },\r\n  currentExerciseText: {\r\n    paddingBottom: \"1vh\",\r\n    margin: 0,\r\n  },\r\n  exerciseTimeContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  exerciseTimeText: {\r\n    fontWeight: \"regular\",\r\n    position: \"absolute\",\r\n    margin: 0,\r\n  },\r\n  excerciseProgressContainer: {\r\n    position: \"absolute\",\r\n  },\r\n  buttonRow: {\r\n    marginTop: \"2vh\",\r\n  },\r\n  extraInfoContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    marginTop: \"2vh\",\r\n  },\r\n  extraInfoText: {\r\n    margin: 0,\r\n    fontSize: \"20px\",\r\n  },\r\n  extraInfoSeparation: {\r\n    minWidth: \"40px\",\r\n  },\r\n}));\r\n\r\n/**\r\n * Formats the given time to a string (HH :) MM : SS\r\n * @param {number} timeMilis Time to be formatted in milliseconds\r\n */\r\nfunction timeFormatter(timeMilis) {\r\n  //let deciseconds = (\"0\" + (Math.floor(timeMilis / 100) % 10)).slice(-1);\r\n  let seconds = (\"0\" + (Math.floor(timeMilis / 1000) % 60)).slice(-2);\r\n  let minutes = (\"0\" + (Math.floor(timeMilis / 60000) % 60)).slice(-2);\r\n  let hours = (\"0\" + Math.floor(timeMilis / 3600000)).slice(-2);\r\n\r\n  let output = \"\";\r\n  if (hours === \"00\") {\r\n    output = minutes + \" : \" + seconds;\r\n  } else {\r\n    output = hours + \" : \" + minutes + \" : \" + seconds;\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction getTimerState(timerOn, timerTime, timerFinished) {\r\n  //  DIFFERENT TIMER STATES:\r\n  if (timerOn) {\r\n    return \"Playing\";\r\n  }\r\n  if (timerFinished) {\r\n    return \"Finished\";\r\n  }\r\n  if (!timerOn && timerTime === 0) {\r\n    return \"Not Started\";\r\n  }\r\n  if (!timerOn && timerTime > 0) {\r\n    return \"Paused\";\r\n  }\r\n}\r\n\r\nfunction getButtons(timerOn, timerTime, timerFinished, controlFunctions) {\r\n  const status = getTimerState(timerOn, timerTime, timerFinished);\r\n  return <ControlButons status={status} controlFunctions={controlFunctions} />;\r\n}\r\n\r\nfunction Stopwatch(props) {\r\n  const classes = useStyles();\r\n\r\n  const [timerOn, setTimerOn] = useState(false);\r\n  const [timerTime, setTimerTime] = useState(0);\r\n  const [timerFinished, setTimerFinished] = useState(false);\r\n  const [currentExercise, setCurrentExercise] = useState(\"\");\r\n\r\n  let [events, setEvents] = useState([]);\r\n  const [lastStart, setLastStart] = useState(0);\r\n  const [timer, setTimer] = useState(\"\");\r\n\r\n  const startTimer = () => {\r\n    setTimerOn(true);\r\n    setTimerFinished(false);\r\n    setTimerTime(timerTime);\r\n    let startTime = Date.now() - timerTime;\r\n\r\n    setTimer(\r\n      setInterval(() => {\r\n        setTimerTime(Date.now() - startTime);\r\n      }, 10)\r\n    );\r\n  };\r\n\r\n  const pauseTimer = () => {\r\n    setTimerOn(false);\r\n    clearInterval(timer);\r\n  };\r\n\r\n  const resetTimer = () => {\r\n    setTimerTime(0);\r\n    setTimerFinished(false);\r\n\r\n    startEvents();\r\n  };\r\n\r\n  const startEvents = () => {\r\n    let localEvents = [...props.workout.exercises];\r\n\r\n    if (localEvents.length > 0) {\r\n      setCurrentExercise(localEvents.shift());\r\n    }\r\n    setEvents(localEvents);\r\n    setLastStart(0);\r\n  };\r\n\r\n  const workoutFinished = () => {\r\n    props.notifyChange();\r\n    setTimerFinished(true);\r\n    pauseTimer();\r\n  };\r\n\r\n  const getNextExercise = () => {\r\n    let localEvents = [...events];\r\n    let nextExercise = localEvents.shift();\r\n    props.notifyChange();\r\n    setEvents(localEvents);\r\n    return nextExercise;\r\n  };\r\n\r\n  const changeExercise = (totalSeconds) => {\r\n    if (events.length === 0) {\r\n      workoutFinished();\r\n    } else {\r\n      setLastStart(totalSeconds);\r\n      setCurrentExercise(getNextExercise());\r\n    }\r\n  };\r\n\r\n  const handleUpdateSignal = () => {\r\n    pauseTimer();\r\n    resetTimer();\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleUpdateSignal();\r\n  }, [props.workout]);\r\n\r\n  let totalSeconds = Math.floor(timerTime / 1000);\r\n  let exerciseMilis = timerTime - lastStart * 1000;\r\n  let exerciseSeconds = Math.floor(exerciseMilis / 1000);\r\n  let exerciseLeft = currentExercise.duration - exerciseSeconds;\r\n\r\n  if (timerOn && exerciseSeconds >= currentExercise.duration) {\r\n    changeExercise(totalSeconds);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {!timerFinished && (\r\n        <div>\r\n          <div>\r\n            <p className={classes.currentExerciseLabel}>Current exercise: </p>\r\n            <Typography variant=\"h1\" className={classes.currentExerciseText}>\r\n              {currentExercise.name}\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.exerciseTimeContainer}>\r\n            <Typography variant=\"h1\" className={classes.exerciseTimeText}>\r\n              {timeFormatter(exerciseLeft * 1000)}\r\n            </Typography>\r\n            <div className={classes.excerciseProgressContainer}>\r\n              <CircularProgress\r\n                className={classes.excerciseProgress}\r\n                variant=\"static\"\r\n                value={\r\n                  100 -\r\n                  parseInt(exerciseMilis / (currentExercise.duration * 10))\r\n                }\r\n                size={\"36vh\"}\r\n                thickness={6}\r\n              />\r\n            </div>\r\n            <CircularProgress\r\n              className={classes.totalProgress}\r\n              variant=\"static\"\r\n              color=\"secondary\"\r\n              size={\"42vh\"}\r\n              thickness={1}\r\n              // Could make this value update with seconds. Better?\r\n              // TODO: Check which way users like best.\r\n              value={parseInt(timerTime / props.workout.duration / 10)}\r\n            />\r\n          </div>\r\n\r\n          <div className={classes.buttonRow}>\r\n            {getButtons(timerOn, timerTime, timerFinished, [\r\n              startTimer,\r\n              pauseTimer,\r\n              resetTimer,\r\n            ])}\r\n          </div>\r\n\r\n          <div className={classes.extraInfoContainer}>\r\n            <div>\r\n              Time elapsed:\r\n              <h4 className={classes.extraInfoText}>\r\n                {timeFormatter(timerTime)}\r\n              </h4>\r\n            </div>\r\n\r\n            <div className={classes.extraInfoSeparation} />\r\n\r\n            <div>\r\n              Exercises left:\r\n              <h4 className={classes.extraInfoText}>\r\n                {events.length + 1}/{props.workout.exercises.length}\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {timerFinished && timerTime !== 0 && (\r\n        <div>\r\n          <h3>Workout done! Congratulations!</h3>\r\n          <div className={classes.buttonRow}>\r\n            {getButtons(timerOn, timerTime, timerFinished, [\r\n              startTimer,\r\n              pauseTimer,\r\n              resetTimer,\r\n            ])}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stopwatch;\r\n","import React from \"react\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  ExpansionPanelDetails,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: 30,\r\n    // backgroundColor: \"darkGrey\",\r\n  },\r\n  helpAndInfo: {\r\n    display: \"inline-block\",\r\n    alignItems: \"center\",\r\n    width: \"80%\",\r\n    maxWidth: 505,\r\n  },\r\n  panelDetails: {\r\n    paddingTop: 0,\r\n    textAlign: \"left\",\r\n  },\r\n  text: {\r\n    marginTop: \"0\",\r\n    marginBottom: \"0\",\r\n  },\r\n  instructionList: {\r\n    paddingLeft: \"10px\",\r\n    margin: 0,\r\n  },\r\n  listItem: {\r\n    marginTop: \"5px\",\r\n    textAlign: \"justify\",\r\n  },\r\n}));\r\n\r\nfunction HelpAndInfo(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.helpAndInfo}>\r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n            <Typography variant=\"h6\">How to write the workout</Typography>\r\n          </ExpansionPanelSummary>\r\n\r\n          <ExpansionPanelDetails className={classes.panelDetails}>\r\n            <div>\r\n              <p className={classes.text}>Follow these instructions:</p>\r\n              <ul className={classes.instructionList}>\r\n                <li className={classes.listItem}>\r\n                  {\" \"}\r\n                  You must write exercises or exercise blocks separated by{\" \"}\r\n                  <b>,</b> or <b>+</b>.\r\n                </li>\r\n                <li className={classes.listItem}>\r\n                  {\" \"}\r\n                  <u>Exercises:</u> <br />\r\n                  First write the duration by expressing minutes <b>'</b> and\r\n                  seconds <b>\"</b>, and then the exercise name.\r\n                </li>\r\n                <li className={classes.listItem}>\r\n                  <u>Exercise blocks:</u> <br />\r\n                  First write the number of repetitions followed by the\r\n                  multiplication symbol <b>x</b> or <b>*</b> and then the block\r\n                  between parentheses: <b>( )</b> or <b>[ ]</b> or{\" \"}\r\n                  <b>{\"{ }\"}</b>. <br />\r\n                </li>\r\n              </ul>\r\n              <p>You may write nested blocks.</p>\r\n            </div>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\r\n            <Typography variant=\"h6\">About the app</Typography>\r\n          </ExpansionPanelSummary>\r\n\r\n          <ExpansionPanelDetails className={classes.panelDetails}>\r\n            <p>\r\n              This app is supposed to help you with your workouts. If you enter\r\n              the workout in the format explained above, it will tell you which\r\n              exercise you're at and much time is left. <br />\r\n              <br />\r\n              If you're unsure how to do it, try the example above! <br />\r\n              <br />\r\n              App created with &#60;3 by{\" \"}\r\n              <a href=\"https://github.com/t1emp0\">t1emp0</a>.\r\n            </p>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HelpAndInfo;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { IconButton } from \"@material-ui/core\";\r\n\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    zIndex: \"1\",\r\n    position: \"fixed\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"rgba(0,0,0,0.5)\",\r\n  },\r\n  modal_content: {\r\n    display: \"inline\",\r\n    backgroundColor: theme.palette.background.default,\r\n    opacity: \"1\",\r\n    top: \"50%\",\r\n    position: \"absolute\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    padding: 20,\r\n    paddingTop: 10,\r\n    paddingBottom: 30,\r\n    maxWidth: \"80%\",\r\n    borderRadius: \"8px\",\r\n  },\r\n  close: {\r\n    textAlign: \"right\",\r\n  },\r\n  inside: {},\r\n}));\r\n\r\nfunction PopUp(props) {\r\n  const classes = useStyles();\r\n  const node = useRef();\r\n\r\n  const handleClose = () => {\r\n    props.toggle();\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    if (node.current.contains(e.target)) {\r\n      // inside click\r\n      console.log(\"click  inside\");\r\n      return;\r\n    }\r\n    // outside click\r\n    handleClose();\r\n  };\r\n\r\n  useEffect(() => {\r\n    // add when mounted\r\n    document.addEventListener(\"mousedown\", handleClick);\r\n    // return function to be called when unmounted\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClick);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.modal}>\r\n      <div className={classes.modal_content} ref={node}>\r\n        <div className={classes.close}>\r\n          <IconButton onClick={handleClose}>\r\n            <CloseIcon style={{ fontSize: 24 }} />\r\n          </IconButton>\r\n        </div>\r\n        <div className={classes.inside}>{props.inside}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PopUp;\r\n","import React, { useState } from \"react\";\r\nimport { Grid, Typography, Switch, Slider } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport VolumeDown from \"@material-ui/icons/VolumeDown\";\r\nimport VolumeUp from \"@material-ui/icons/VolumeUp\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: \"250px\",\r\n    paddingTop: \"15px\",\r\n  },\r\n  grid: {\r\n    spacing: 2,\r\n    alignItems: \"center\",\r\n    justify: \"center\",\r\n    paddingBottom: \"20px\",\r\n  },\r\n}));\r\n\r\nfunction Settings(props) {\r\n  const classes = useStyles();\r\n\r\n  let [volumeActive, setVolumeActive, volume, setVolume] = props.funcs;\r\n  let previousVolume = useState(parseInt(volume * 100))[0];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={2} justify={\"center\"} className={classes.grid}>\r\n        <Grid item>\r\n          <Typography variant=\"h3\">Volume</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <span>\r\n            <Switch\r\n              checked={volumeActive}\r\n              onChange={(event) => {\r\n                setVolumeActive(event.target.checked);\r\n              }}\r\n              color=\"secondary\"\r\n            />\r\n          </span>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container spacing={2} className={classes.grid}>\r\n        <Grid item>\r\n          <VolumeDown />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Slider\r\n            disabled={!volumeActive}\r\n            defaultValue={previousVolume}\r\n            volume={volume}\r\n            onChange={(event, newVolume) => {\r\n              setVolume(newVolume * 0.01);\r\n            }}\r\n            color=\"secondary\"\r\n            aria-labelledby=\"volume-slider\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <VolumeUp />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import audio from \"../assets/bells.mp3\";\r\n\r\nfunction notifyChange(vol, volEnabled) {\r\n  const audioF = new Audio();\r\n\r\n  audioF.src = audio;\r\n  audioF.load();\r\n  audioF.volume = vol;\r\n\r\n  if (volEnabled) {\r\n    audioF.play();\r\n  }\r\n}\r\n\r\nexport default notifyChange;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nimport FormHandler from \"./components/FormHandler\";\r\nimport Stopwatch from \"./components/Stopwatch\";\r\nimport HelpAndInfo from \"./components/HelpAndInfo\";\r\nimport PopUp from \"./components/Popup\";\r\nimport Settings from \"./components/Settings\";\r\nimport notifyChange from \"./components/ChangeNotifier\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  app: {\r\n    textAlign: \"center\",\r\n    backgroundColor: theme.palette.background.default,\r\n    minHeight: \"100vh\",\r\n  },\r\n  content: {\r\n    minWidth: 280,\r\n    minHeight: 600,\r\n    margin: \"auto\",\r\n    paddingBottom: 20,\r\n  },\r\n  title: {\r\n    paddingTop: \"4vh\",\r\n    paddingBottom: 10,\r\n    userSelect: \"none\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  let classes = useStyles();\r\n\r\n  let [workout, setWorkout] = useState({ exercises: [] });\r\n\r\n  let [settingsEnabled, setSettingsEnabled] = useState(false);\r\n  let [volumeEnabled, setVolumeActive] = useState(true);\r\n  let [volume, setVolume] = useState(1);\r\n\r\n  const fullNotifyUpdated = () => {\r\n    notifyChange(volume, volumeEnabled);\r\n  };\r\n\r\n  const togglePopUp = () => {\r\n    setSettingsEnabled(!settingsEnabled);\r\n  };\r\n\r\n  const titleClick = () => {\r\n    //TODO: Add alert\r\n    setWorkout({ exercises: [] });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n      <div className={classes.content}>\r\n        {settingsEnabled && (\r\n          <PopUp\r\n            toggle={togglePopUp}\r\n            inside={\r\n              <Settings\r\n                funcs={[volumeEnabled, setVolumeActive, volume, setVolume]}\r\n              />\r\n            }\r\n          />\r\n        )}\r\n\r\n        <div onClick={titleClick}>\r\n          <Typography variant=\"h2\" className={classes.title}>\r\n            WORKOUT TIMER\r\n          </Typography>\r\n        </div>\r\n\r\n        <FormHandler\r\n          workout={workout}\r\n          setWorkout={setWorkout}\r\n          openSettings={togglePopUp}\r\n        />\r\n\r\n        {workout.exercises.length === 0 && <HelpAndInfo />}\r\n\r\n        {workout.exercises.length > 0 && (\r\n          <Stopwatch workout={workout} notifyChange={fullNotifyUpdated} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport \"typeface-montserrat\";\r\nimport \"typeface-inter\";\r\n\r\nconst lightTheme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: '\"Inter\", \"Montserrat\", sans-serif',\r\n    fontSize: 12,\r\n\r\n    h1: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 40,\r\n    },\r\n    h2: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 30,\r\n    },\r\n    h3: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 24,\r\n    },\r\n    h6: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 16,\r\n    },\r\n    subtitle1: {\r\n      fontFamily: '\"Montserrat\", \"Inter\", sans-serif',\r\n      fontWeight: 600,\r\n      fontSize: 14,\r\n    },\r\n  },\r\n\r\n  palette: {\r\n    primary: {\r\n      main: \"#2E97FF\",\r\n    },\r\n    secondary: {\r\n      main: \"#000080\",\r\n    },\r\n    accent: {\r\n      main: \"#80d6d1\",\r\n    },\r\n    background: {\r\n      main: \"#F2F5FF\",\r\n      default: \"#F2F5FF\",\r\n    },\r\n    w: {\r\n      main: \"#ff5656\",\r\n    },\r\n  },\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={lightTheme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}